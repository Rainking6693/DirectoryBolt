/**\n * JASON - Quick Validation Test Runner\n * Tests the customer validation API to identify the root cause\n */\n\nconst { spawn } = require('child_process');\nconst fs = require('fs');\n\n// Test with a real customer ID from Google Sheets\nconst REAL_CUSTOMER_ID = 'DIR-2025-001234';\n\nconsole.log('🔍 JASON - Running Customer Validation Tests...');\nconsole.log('=' .repeat(60));\n\n// Run the existing customer validation test\nconsole.log('\\n📋 Running existing customer validation test...');\n\ntry {\n  // Run the test-customer-validation.js script\n  const testProcess = spawn('node', ['test-customer-validation.js'], {\n    stdio: 'inherit',\n    env: { ...process.env, NODE_ENV: 'production' }\n  });\n\n  testProcess.on('close', (code) => {\n    console.log(`\\n📊 Customer validation test completed with code: ${code}`);\n    \n    if (code === 0) {\n      console.log('✅ Test passed - validation is working');\n    } else {\n      console.log('❌ Test failed - validation has issues');\n      \n      // Run additional diagnostics\n      console.log('\\n🔧 Running additional diagnostics...');\n      runAdditionalDiagnostics();\n    }\n  });\n\n  testProcess.on('error', (error) => {\n    console.error('💥 Failed to run test:', error.message);\n    runAdditionalDiagnostics();\n  });\n\n} catch (error) {\n  console.error('💥 Error running validation test:', error.message);\n  runAdditionalDiagnostics();\n}\n\nfunction runAdditionalDiagnostics() {\n  console.log('\\n🔍 Running additional diagnostics...');\n  \n  // Check if Google Sheets environment variables are available\n  console.log('\\n📊 Environment Variables Check:');\n  console.log(`GOOGLE_SHEET_ID: ${process.env.GOOGLE_SHEET_ID ? 'SET' : 'MISSING'}`);\n  console.log(`GOOGLE_SERVICE_ACCOUNT_EMAIL: ${process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL ? 'SET' : 'MISSING'}`);\n  console.log(`GOOGLE_PRIVATE_KEY: ${process.env.GOOGLE_PRIVATE_KEY ? 'SET' : 'MISSING'}`);\n  \n  // Test local Google Sheets connection\n  console.log('\\n🧪 Testing local Google Sheets connection...');\n  \n  try {\n    const { createGoogleSheetsService } = require('./lib/services/google-sheets.js');\n    const service = createGoogleSheetsService();\n    \n    service.initialize().then(() => {\n      console.log('✅ Local Google Sheets connection successful');\n      \n      // Try to find a test customer\n      return service.findByCustomerId(REAL_CUSTOMER_ID);\n    }).then((customer) => {\n      if (customer) {\n        console.log('✅ Found test customer in Google Sheets:', customer.businessName);\n        console.log('🎯 Google Sheets is working locally - issue is likely in production environment');\n      } else {\n        console.log('❌ Test customer not found in Google Sheets');\n        console.log('🔧 Need to add test customer to Google Sheets');\n      }\n    }).catch((error) => {\n      console.error('❌ Local Google Sheets connection failed:', error.message);\n      console.log('🔧 Google Sheets configuration issue detected');\n    });\n    \n  } catch (error) {\n    console.error('💥 Failed to test Google Sheets:', error.message);\n  }\n  \n  // Test production API endpoints\n  console.log('\\n🌐 Testing production API endpoints...');\n  testProductionEndpoints();\n}\n\nasync function testProductionEndpoints() {\n  const fetch = require('node-fetch');\n  const baseUrl = 'https://directorybolt.com';\n  \n  const endpoints = [\n    '/api/extension/validate',\n    '/api/customer/validate',\n    '/api/health'\n  ];\n  \n  for (const endpoint of endpoints) {\n    try {\n      console.log(`\\n🔍 Testing ${baseUrl}${endpoint}`);\n      \n      const response = await fetch(`${baseUrl}${endpoint}`, {\n        method: endpoint === '/api/health' ? 'GET' : 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': 'DirectoryBolt-Validation-Test/1.0'\n        },\n        body: endpoint !== '/api/health' ? JSON.stringify({\n          customerId: REAL_CUSTOMER_ID,\n          extensionVersion: '3.0.1',\n          timestamp: Date.now()\n        }) : undefined\n      });\n      \n      console.log(`   Status: ${response.status} ${response.statusText}`);\n      \n      const responseText = await response.text();\n      console.log(`   Response: ${responseText.substring(0, 300)}${responseText.length > 300 ? '...' : ''}`);\n      \n      if (response.ok && endpoint !== '/api/health') {\n        try {\n          const data = JSON.parse(responseText);\n          if (data.valid) {\n            console.log(`   ✅ Validation successful: ${data.customerName || data.businessName}`);\n          } else {\n            console.log(`   ❌ Validation failed: ${data.error}`);\n          }\n        } catch (e) {\n          console.log(`   ⚠️  Response not JSON`);\n        }\n      }\n      \n    } catch (error) {\n      console.log(`   💥 Network error: ${error.message}`);\n    }\n  }\n  \n  console.log('\\n🎯 JASON - Validation test complete. Check results above.');\n}\n"