'use client'
import { useState, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

interface PDFTemplate {
  id: string
  name: string
  description: string
  thumbnail: string
  pages: number
  sections: string[]
  businessType: string[]
  tier: 'starter' | 'growth' | 'professional'
  features: {
    whiteLabel: boolean
    customBranding: boolean
    interactiveElements: boolean
    appendices: boolean
  }
}

interface PreviewData {
  businessName: string
  analysisDate: string
  opportunitiesFound: number
  estimatedValue: number
  industry: string
  confidenceScore: number
  competitiveAdvantages: string[]
  keyFindings: string[]
  pages: number
  sections: number
  charts: number
  focus: string
}

interface PDFReportGeneratorProps {
  analysisData: {
    businessName: string
    opportunitiesFound: number
    estimatedValue: number
    analysisDate: string
    industry: string
  }
  userTier: 'free' | 'starter' | 'growth' | 'professional'
  onGenerate: (templateId: string, options: any) => void
  onUpgrade: () => void
}

export default function PDFReportGenerator({
  analysisData,
  userTier,
  onGenerate,
  onUpgrade
}: PDFReportGeneratorProps) {
  const [selectedTemplate, setSelectedTemplate] = useState<string>('')
  const [customOptions, setCustomOptions] = useState({
    includeLogo: false,
    companyName: analysisData.businessName,
    reportTitle: 'Directory Business Intelligence Report',
    primaryColor: '#FACC15', // volt-400
    includeExecutiveSummary: true,
    includeDetailedAnalysis: true,
    includeActionPlan: true,
    includeAppendices: false,
    footerText: 'Generated by DirectoryBolt AI',
    confidential: true
  })
  const [isGenerating, setIsGenerating] = useState(false)
  const [previewMode, setPreviewMode] = useState(false)
  const [generationProgress, setGenerationProgress] = useState(0)
  
  const fileInputRef = useRef<HTMLInputElement>(null)

  const pdfTemplates: PDFTemplate[] = [
    {
      id: 'executive-brief',
      name: 'Executive Brief',
      description: 'Concise 2-page summary perfect for stakeholders and decision-makers',
      thumbnail: '/templates/executive-brief.png',
      pages: 2,
      sections: ['Executive Summary', 'Key Opportunities', 'ROI Projections'],
      businessType: ['startup', 'small', 'medium'],
      tier: 'starter',
      features: {
        whiteLabel: false,
        customBranding: false,
        interactiveElements: false,
        appendices: false
      }
    },
    {
      id: 'comprehensive-analysis',
      name: 'Comprehensive Analysis',
      description: 'Complete 12-page report with detailed insights and actionable recommendations',
      thumbnail: '/templates/comprehensive.png',
      pages: 12,
      sections: [
        'Executive Summary',
        'Business Profile',
        'Market Analysis',
        'Directory Opportunities',
        'Competitive Intelligence',
        'Financial Projections',
        'Implementation Roadmap'
      ],
      businessType: ['small', 'medium', 'large'],
      tier: 'growth',
      features: {
        whiteLabel: false,
        customBranding: true,
        interactiveElements: true,
        appendices: true
      }
    },
    {
      id: 'enterprise-deck',
      name: 'Enterprise Presentation',
      description: 'Professional 20+ page presentation with custom branding and white-label options',
      thumbnail: '/templates/enterprise.png',
      pages: 24,
      sections: [
        'Executive Summary',
        'Market Intelligence',
        'Competitive Landscape',
        'Opportunity Matrix',
        'Financial Modeling',
        'Risk Analysis',
        'Strategic Roadmap',
        'Technical Appendices'
      ],
      businessType: ['medium', 'large', 'enterprise'],
      tier: 'professional',
      features: {
        whiteLabel: true,
        customBranding: true,
        interactiveElements: true,
        appendices: true
      }
    },
    {
      id: 'investor-pitch',
      name: 'Investor Pitch',
      description: 'Investment-focused report highlighting market opportunity and growth potential',
      thumbnail: '/templates/investor.png',
      pages: 16,
      sections: [
        'Market Opportunity',
        'Competitive Advantages',
        'Financial Projections',
        'Growth Strategy',
        'Risk Mitigation'
      ],
      businessType: ['startup', 'growth'],
      tier: 'professional',
      features: {
        whiteLabel: true,
        customBranding: true,
        interactiveElements: true,
        appendices: true
      }
    }
  ]

  const isTemplateAccessible = (template: PDFTemplate) => {
    const tierLevels = { free: 0, starter: 1, growth: 2, professional: 3 }
    const templateTierLevels = { starter: 1, growth: 2, professional: 3 }
    return tierLevels[userTier] >= templateTierLevels[template.tier]
  }

  const getTemplatePreviewData = (templateId: string): PreviewData => {
    const baseData = {
      businessName: analysisData.businessName,
      analysisDate: analysisData.analysisDate,
      opportunitiesFound: analysisData.opportunitiesFound,
      estimatedValue: analysisData.estimatedValue,
      industry: analysisData.industry,
      confidenceScore: 94,
      competitiveAdvantages: [
        'Strong brand recognition in local market',
        'Superior customer service ratings',
        'Innovative service delivery model',
        'Established customer base and referral network'
      ],
      keyFindings: [
        `Identified ${analysisData.opportunitiesFound} high-authority directories with 90%+ approval rates`,
        `Conservative revenue projection: $${analysisData.estimatedValue.toLocaleString()}/month`,
        'Significant competitive gaps in directory presence',
        'Strong SEO opportunity with quality backlink potential'
      ]
    }

    switch (templateId) {
      case 'executive-brief':
        return {
          ...baseData,
          pages: 2,
          sections: 3,
          charts: 2,
          focus: 'High-level overview for quick decision making'
        }
      case 'comprehensive-analysis':
        return {
          ...baseData,
          pages: 12,
          sections: 7,
          charts: 8,
          focus: 'Detailed analysis with actionable insights'
        }
      case 'enterprise-deck':
        return {
          ...baseData,
          pages: 24,
          sections: 8,
          charts: 15,
          focus: 'Enterprise-grade analysis with custom branding'
        }
      case 'investor-pitch':
        return {
          ...baseData,
          pages: 16,
          sections: 5,
          charts: 12,
          focus: 'Investment-focused with growth projections'
        }
      default:
        return {
          ...baseData,
          pages: 1,
          sections: 1,
          charts: 0,
          focus: 'Basic analysis overview'
        }
    }
  }

  const simulateGeneration = async () => {
    setIsGenerating(true)
    setGenerationProgress(0)
    
    // Simulate progress
    const progressSteps = [
      { step: 'Analyzing data...', progress: 20 },
      { step: 'Generating insights...', progress: 40 },
      { step: 'Creating visualizations...', progress: 60 },
      { step: 'Formatting report...', progress: 80 },
      { step: 'Finalizing PDF...', progress: 100 }
    ]

    for (const step of progressSteps) {
      await new Promise(resolve => setTimeout(resolve, 1500))
      setGenerationProgress(step.progress)
    }

    await new Promise(resolve => setTimeout(resolve, 500))
    setIsGenerating(false)
    setGenerationProgress(0)
  }

  const handleGenerate = async () => {
    if (!selectedTemplate) return
    
    await simulateGeneration()
    onGenerate(selectedTemplate, customOptions)
  }

  const TemplateCard = ({ template }: { template: PDFTemplate }) => {
    const isAccessible = isTemplateAccessible(template)
    const previewData = getTemplatePreviewData(template.id)
    
    return (
      <motion.div
        whileHover={{ scale: isAccessible ? 1.02 : 1 }}
        className={`relative bg-gradient-to-br from-secondary-800/90 to-secondary-900/70 rounded-2xl border backdrop-blur-sm transition-all duration-300 ${
          selectedTemplate === template.id && isAccessible
            ? 'border-volt-500 shadow-2xl shadow-volt-500/20'
            : isAccessible
              ? 'border-secondary-700 hover:border-volt-500/50'
              : 'border-secondary-600 opacity-60'
        }`}
        onClick={() => isAccessible && setSelectedTemplate(template.id)}
      >
        {/* Lock Overlay */}
        {!isAccessible && (
          <div className="absolute inset-0 bg-gradient-to-br from-secondary-900/90 to-secondary-800/80 rounded-2xl flex items-center justify-center backdrop-blur-sm z-10">
            <div className="text-center">
              <div className="text-4xl mb-2">ðŸ”’</div>
              <div className="text-volt-400 font-bold text-sm mb-2">
                {template.tier.toUpperCase()} TEMPLATE
              </div>
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  onUpgrade()
                }}
                className="bg-gradient-to-r from-volt-500 to-volt-600 text-secondary-900 font-bold py-1 px-3 rounded text-xs hover:from-volt-400 hover:to-volt-500 transition-all duration-300"
              >
                Upgrade
              </button>
            </div>
          </div>
        )}

        <div className="p-6">
          {/* Template Preview */}
          <div className="bg-secondary-700/50 rounded-lg mb-4 h-32 flex items-center justify-center relative overflow-hidden">
            <div className="text-6xl opacity-20">ðŸ“„</div>
            <div className="absolute inset-0 bg-gradient-to-br from-volt-500/5 to-volt-600/10"></div>
            <div className="absolute top-2 right-2 bg-secondary-800/80 rounded px-2 py-1 text-xs text-secondary-300">
              {template.pages} pages
            </div>
          </div>

          {/* Template Info */}
          <div className="mb-4">
            <div className="flex items-start justify-between mb-2">
              <h3 className="font-bold text-white text-lg">{template.name}</h3>
              <div className={`px-2 py-1 rounded-full text-xs font-bold ${
                template.tier === 'starter' ? 'bg-orange-500 text-white' :
                template.tier === 'growth' ? 'bg-volt-500 text-secondary-900' :
                'bg-success-500 text-white'
              }`}>
                {template.tier.toUpperCase()}
              </div>
            </div>
            <p className="text-secondary-400 text-sm mb-3">{template.description}</p>
          </div>

          {/* Preview Data */}
          <div className="bg-secondary-700/30 rounded-lg p-4 mb-4">
            <h4 className="text-volt-400 font-semibold text-sm mb-2">Report Preview:</h4>
            <div className="grid grid-cols-2 gap-3 text-xs">
              <div>
                <span className="text-secondary-400">Sections:</span>
                <span className="text-white font-medium ml-2">{previewData.sections}</span>
              </div>
              <div>
                <span className="text-secondary-400">Charts:</span>
                <span className="text-white font-medium ml-2">{previewData.charts}</span>
              </div>
              <div className="col-span-2">
                <span className="text-secondary-400">Focus:</span>
                <span className="text-secondary-200 ml-2">{previewData.focus}</span>
              </div>
            </div>
          </div>

          {/* Features */}
          <div className="space-y-2 mb-4">
            {template.sections.slice(0, 3).map((section, index) => (
              <div key={index} className="flex items-start gap-2 text-xs">
                <span className="text-success-400 flex-shrink-0 mt-0.5">âœ“</span>
                <span className="text-secondary-300">{section}</span>
              </div>
            ))}
            {template.sections.length > 3 && (
              <div className="text-xs text-secondary-400 pl-4">
                +{template.sections.length - 3} more sections
              </div>
            )}
          </div>

          {/* Premium Features */}
          <div className="flex flex-wrap gap-2 mb-4">
            {template.features.customBranding && (
              <span className="bg-volt-500/20 text-volt-300 px-2 py-1 rounded text-xs">
                Custom Branding
              </span>
            )}
            {template.features.whiteLabel && (
              <span className="bg-success-500/20 text-success-300 px-2 py-1 rounded text-xs">
                White Label
              </span>
            )}
            {template.features.interactiveElements && (
              <span className="bg-orange-500/20 text-orange-300 px-2 py-1 rounded text-xs">
                Interactive
              </span>
            )}
          </div>

          {/* Selection Indicator */}
          {selectedTemplate === template.id && isAccessible && (
            <div className="text-center">
              <div className="bg-volt-500 text-secondary-900 font-bold py-2 px-4 rounded-lg text-sm">
                âœ“ Selected Template
              </div>
            </div>
          )}
        </div>
      </motion.div>
    )
  }

  const CustomizationPanel = () => (
    <div className="bg-secondary-800/50 rounded-2xl border border-secondary-700 p-6">
      <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-3">
        <span>ðŸŽ¨</span>
        Report Customization
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Basic Options */}
        <div className="space-y-4">
          <div>
            <label className="block text-secondary-300 text-sm font-medium mb-2">
              Report Title
            </label>
            <input
              type="text"
              value={customOptions.reportTitle}
              onChange={(e) => setCustomOptions(prev => ({ ...prev, reportTitle: e.target.value }))}
              className="w-full bg-secondary-900 border border-secondary-600 rounded-lg px-3 py-2 text-white text-sm focus:border-volt-500 transition-colors"
            />
          </div>

          <div>
            <label className="block text-secondary-300 text-sm font-medium mb-2">
              Company Name
            </label>
            <input
              type="text"
              value={customOptions.companyName}
              onChange={(e) => setCustomOptions(prev => ({ ...prev, companyName: e.target.value }))}
              className="w-full bg-secondary-900 border border-secondary-600 rounded-lg px-3 py-2 text-white text-sm focus:border-volt-500 transition-colors"
            />
          </div>

          <div>
            <label className="block text-secondary-300 text-sm font-medium mb-2">
              Primary Color
            </label>
            <div className="flex items-center gap-2">
              <input
                type="color"
                value={customOptions.primaryColor}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, primaryColor: e.target.value }))}
                className="w-12 h-10 bg-secondary-900 border border-secondary-600 rounded cursor-pointer"
              />
              <input
                type="text"
                value={customOptions.primaryColor}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, primaryColor: e.target.value }))}
                className="flex-1 bg-secondary-900 border border-secondary-600 rounded-lg px-3 py-2 text-white text-sm focus:border-volt-500 transition-colors"
              />
            </div>
          </div>
        </div>

        {/* Advanced Options */}
        <div className="space-y-4">
          <div>
            <label className="flex items-center gap-2 text-secondary-300 text-sm">
              <input
                type="checkbox"
                checked={customOptions.includeExecutiveSummary}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, includeExecutiveSummary: e.target.checked }))}
                className="rounded border-secondary-600 bg-secondary-900 text-volt-500 focus:ring-volt-500"
              />
              Include Executive Summary
            </label>
          </div>

          <div>
            <label className="flex items-center gap-2 text-secondary-300 text-sm">
              <input
                type="checkbox"
                checked={customOptions.includeDetailedAnalysis}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, includeDetailedAnalysis: e.target.checked }))}
                className="rounded border-secondary-600 bg-secondary-900 text-volt-500 focus:ring-volt-500"
              />
              Include Detailed Analysis
            </label>
          </div>

          <div>
            <label className="flex items-center gap-2 text-secondary-300 text-sm">
              <input
                type="checkbox"
                checked={customOptions.includeActionPlan}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, includeActionPlan: e.target.checked }))}
                className="rounded border-secondary-600 bg-secondary-900 text-volt-500 focus:ring-volt-500"
              />
              Include Action Plan
            </label>
          </div>

          <div>
            <label className="flex items-center gap-2 text-secondary-300 text-sm">
              <input
                type="checkbox"
                checked={customOptions.includeAppendices}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, includeAppendices: e.target.checked }))}
                disabled={userTier === 'free' || userTier === 'starter'}
                className="rounded border-secondary-600 bg-secondary-900 text-volt-500 focus:ring-volt-500 disabled:opacity-50"
              />
              Include Technical Appendices
              {(userTier === 'free' || userTier === 'starter') && (
                <span className="text-xs text-volt-400">(Growth+ only)</span>
              )}
            </label>
          </div>

          <div>
            <label className="flex items-center gap-2 text-secondary-300 text-sm">
              <input
                type="checkbox"
                checked={customOptions.confidential}
                onChange={(e) => setCustomOptions(prev => ({ ...prev, confidential: e.target.checked }))}
                className="rounded border-secondary-600 bg-secondary-900 text-volt-500 focus:ring-volt-500"
              />
              Mark as Confidential
            </label>
          </div>
        </div>
      </div>

      {/* Logo Upload */}
      <div className="mt-6 pt-6 border-t border-secondary-700">
        <label className="block text-secondary-300 text-sm font-medium mb-3">
          Company Logo (Optional)
        </label>
        <div className="flex items-center gap-4">
          <button
            onClick={() => fileInputRef.current?.click()}
            disabled={userTier === 'free'}
            className={`bg-secondary-700 hover:bg-secondary-600 text-secondary-300 hover:text-white px-4 py-2 rounded-lg text-sm transition-colors ${
              userTier === 'free' ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            Upload Logo
          </button>
          {userTier === 'free' && (
            <span className="text-xs text-volt-400">Available in paid plans</span>
          )}
          <input
            ref={fileInputRef}
            type="file"
            accept="image/*"
            className="hidden"
            onChange={(e) => {
              if (e.target.files?.[0]) {
                setCustomOptions(prev => ({ ...prev, includeLogo: true }))
              }
            }}
          />
        </div>
      </div>
    </div>
  )

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <h2 className="text-3xl font-black text-white mb-4">
          Generate Professional PDF Report
        </h2>
        <p className="text-secondary-300 text-lg max-w-3xl mx-auto">
          Transform your analysis into presentation-ready reports that impress stakeholders and drive decision-making.
        </p>
      </div>

      {/* Template Selection */}
      <div>
        <h3 className="text-xl font-bold text-white mb-6 flex items-center gap-3">
          <span>ðŸ“‹</span>
          Choose Your Template
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
          {pdfTemplates.map(template => (
            <TemplateCard key={template.id} template={template} />
          ))}
        </div>
      </div>

      {/* Customization Panel */}
      {selectedTemplate && isTemplateAccessible(pdfTemplates.find(t => t.id === selectedTemplate)!) && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
        >
          <CustomizationPanel />
        </motion.div>
      )}

      {/* Generation Controls */}
      {selectedTemplate && isTemplateAccessible(pdfTemplates.find(t => t.id === selectedTemplate)!) && (
        <div className="bg-gradient-to-r from-volt-500/10 to-success-500/10 rounded-2xl border border-volt-500/30 p-8 text-center">
          <div className="flex flex-col items-center gap-6">
            <div>
              <h3 className="text-2xl font-bold text-white mb-2">
                Ready to Generate Your Report?
              </h3>
              <p className="text-secondary-300">
                Your professional PDF will be ready in under 30 seconds
              </p>
            </div>

            {!isGenerating ? (
              <button
                onClick={handleGenerate}
                className="bg-gradient-to-r from-volt-500 to-volt-600 text-secondary-900 font-black py-4 px-8 text-lg rounded-xl hover:from-volt-400 hover:to-volt-500 transition-all duration-300 transform hover:scale-105 shadow-2xl hover:shadow-volt-500/50"
              >
                ðŸ“„ Generate PDF Report
              </button>
            ) : (
              <div className="space-y-4">
                <div className="w-64 bg-secondary-700 rounded-full h-3">
                  <motion.div
                    initial={{ width: 0 }}
                    animate={{ width: `${generationProgress}%` }}
                    transition={{ duration: 0.3 }}
                    className="bg-gradient-to-r from-volt-500 to-volt-600 rounded-full h-3"
                  />
                </div>
                <div className="text-volt-400 font-semibold">
                  Generating report... {generationProgress}%
                </div>
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div className="flex items-center justify-center gap-2 text-success-400">
                <span>âœ“</span>
                <span>Professional formatting</span>
              </div>
              <div className="flex items-center justify-center gap-2 text-success-400">
                <span>âœ“</span>
                <span>High-resolution charts</span>
              </div>
              <div className="flex items-center justify-center gap-2 text-success-400">
                <span>âœ“</span>
                <span>Print-ready quality</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Upgrade Prompt for Free Users */}
      {userTier === 'free' && (
        <div className="bg-gradient-to-r from-volt-500/20 to-danger-500/10 rounded-2xl border-2 border-volt-500/50 p-8 text-center">
          <div className="text-6xl mb-4">ðŸ“Š</div>
          <h3 className="text-2xl font-bold text-white mb-4">
            Unlock Professional PDF Reports
          </h3>
          <p className="text-secondary-300 text-lg mb-6 max-w-2xl mx-auto">
            Generate unlimited professional reports with custom branding, advanced templates, and white-label options.
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-secondary-800/50 rounded-xl p-4">
              <div className="text-2xl font-bold text-volt-400 mb-2">10+</div>
              <div className="text-sm text-secondary-300">Professional Templates</div>
            </div>
            <div className="bg-secondary-800/50 rounded-xl p-4">
              <div className="text-2xl font-bold text-success-400 mb-2">Unlimited</div>
              <div className="text-sm text-secondary-300">Report Generation</div>
            </div>
            <div className="bg-secondary-800/50 rounded-xl p-4">
              <div className="text-2xl font-bold text-orange-400 mb-2">Custom</div>
              <div className="text-sm text-secondary-300">Branding & Logo</div>
            </div>
          </div>

          <button
            onClick={onUpgrade}
            className="bg-gradient-to-r from-volt-500 to-volt-600 text-secondary-900 font-black py-4 px-8 text-lg rounded-xl hover:from-volt-400 hover:to-volt-500 transition-all duration-300 transform hover:scale-105 shadow-2xl hover:shadow-volt-500/50"
          >
            ðŸš€ Upgrade to Generate Reports - From $79/month
          </button>
        </div>
      )}
    </div>
  )
}