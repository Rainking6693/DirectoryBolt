{
  "permissions": {
    "allow": [
      "Bash(.git/hooks/pre-commit)",
      "Bash(git commit:*)",
      "Bash(git --version)",
      "Bash(git add:*)",
      "Bash(./pre-commit)",
      "Bash(./pre-commit.bat)",
      "Bash(where bash)",
      "Bash(git rm:*)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(npm run build:*)",
      "Bash(timeout 30 npm run build)",
      "Bash(node test-imports.js)",
      "Bash(npx tsc:*)",
      "Bash(node:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm install:*)",
      "Bash(timeout 20 npm run build)",
      "Bash(npm audit:*)",
      "Bash(npm audit:*)",
      "Bash(npm run lint:*)",
      "Bash(npm run type-check:*)",
      "Bash(grep:*)",
      "Bash(npx @next/bundle-analyzer:*)",
      "Bash(npx next-sitemap:*)",
      "Bash(pkill:*)",
      "Bash(find:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(timeout 120 npm run build)",
      "Bash(taskkill:*)",
      "Bash(npm:*)",
      "Bash(cross-env NODE_ENV=production BUILDING=true NETLIFY=true npm run build)",
      "Bash(NODE_ENV=production BUILDING=true NETLIFY=true npm run build)",
      "Bash(git log:*)",
      "WebFetch(domain:directorybolt.com)",
      "Bash(git push:*)",
      "Bash(timeout:*)",
      "Bash(magick:*)",
      "Bash(BASE_URL=http://localhost:3002 jest tests/validation/framework-validation.test.js --verbose)",
      "Bash(BASE_URL=http://localhost:3002 npx jest tests/validation/framework-validation.test.js --verbose)",
      "Bash(npx eslint:*)",
      "Bash(npx playwright test:*)",
      "Bash(chmod:*)",
      "Bash(./fix-monthly-pricing.sh:*)",
      "WebSearch",
      "Read(C:\\c\\Users\\Ben\\OneDrive\\Documents\\GitHub\\DirectoryBolt/**)",
      "Read(C:\\c\\Users\\Ben\\OneDrive\\Documents\\GitHub\\DirectoryBolt/**)",
      "Bash(set NEXT_TELEMETRY_DISABLED=1)",
      "Bash(time npm run build)",
      "Bash(time npm run build:fast)",
      "Bash(npx next dev:*)",
      "Bash(copy next.config.minimal.js next.config.js)",
      "Bash(time npm run build:analyze)",
      "Bash(npx webpack-bundle-analyzer:*)",
      "Bash(if exist pnpm-lock.yaml echo \"PNPM lockfile found\")",
      "Bash(if exist package-lock.json echo \"NPM lockfile found\")",
      "Bash(if exist yarn.lock echo \"Yarn lockfile found\")",
      "Read(//c/c/Users/Ben/OneDrive/Documents/GitHub/DirectoryBolt/**)",
      "WebFetch(domain:app.netlify.com)",
      "Bash(cat:*)",
      "Read(//c/Users/Ben/auto-bolt-extension/**)",
      "Bash(tasklist)",
      "Bash(PORT=3001 npm run start)",
      "Bash(PORT=3002 npm run dev)",
      "Bash(npx cross-env:*)",
      "Bash(PORT=3003 npm run dev)",
      "Bash(PORT=3004 npm run dev)",
      "Bash(PORT=3005 npm run start)",
      "Bash(mklink:*)",
      "Bash(ln:*)",
      "WebFetch(domain:localhost)",
      "Bash(chrome:*)",
      "Bash(dir:*)",
      "Bash(copy \"auto-bolt-extension\\manifest.json\" \"build\\auto-bolt-extension\\manifest.json\")",
      "Bash(echo:*)",
      "Bash(/bashes)",
      "Bash(set)",
      "Bash(npx lighthouse:*)",
      "WebFetch(domain:business.google.com)",
      "WebFetch(domain:business.yelp.com)",
      "WebFetch(domain:www.yellowpages.com)",
      "WebFetch(domain:directorybolt.netlify.app)",
      "Bash(npx html-validate:*)",
      "Bash(if exist .next rmdir /s /q .next)",
      "Bash(if exist .nextcache rmdir /s /q .nextcache)",
      "Bash(rm:*)",
      "Bash(if [ -n \"$GOOGLE_PRIVATE_KEY\" ])",
      "Bash(then echo \"YES\")",
      "Bash(else echo \"NO\")",
      "Bash(fi)",
      "Bash(start http://localhost:3000/test-extension-validation.html)",
      "Bash(copy:*)",
      "Bash(killall:*)",
      "Bash(netlify env:set:*)",
      "Bash(netlify deploy:*)",
      "Bash(if exist node_modules rmdir /s /q node_modules)",
      "Bash(netlify env:list:*)",
      "Bash(set ADMIN_API_KEY=DirectoryBolt-Admin-2025-SecureKey)",
      "Bash(set STAFF_API_KEY=DirectoryBolt-Staff-2025-SecureKey)",
      "Bash(npx dotenv-cli:*)",
      "Bash(del:*)",
      "Bash(time curl:*)",
      "WebFetch(domain:uxpilot.ai)",
      "Bash(npx @biomejs/biome check:*)",
      "Bash(Ctrl+C)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://kolgqfjgncdwddziqloz.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtvbGdxZmpnbmNkd2RkemlxbG96Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjczODc2MSwiZXhwIjoyMDcyMzE0NzYxfQ.xPoR2Q_yey7AQcorPG3iBLKTadzzSEMmK3eM9ZW46Qc node emergency-database-performance-audit.js)",
      "Bash(NODE_ENV=production node emergency-security-audit.js)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://kolgqfjgncdwddziqloz.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtvbGdxZmpnbmNkd2RkemlxbG96Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjczODc2MSwiZXhwIjoyMDcyMzE0NzYxfQ.xPoR2Q_yey7AQcorPG3iBLKTadzzSEMmK3eM9ZW46Qc node emergency-final-validation.js)",
      "Bash(NEXT_PUBLIC_SUPABASE_URL=https://kolgqfjgncdwddziqloz.supabase.co SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtvbGdxZmpnbmNkd2RkemlxbG96Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjczODc2MSwiZXhwIjoyMDcyMzE0NzYxfQ.xPoR2Q_yey7AQcorPG3iBLKTadzzSEMmK3eM9ZW46Qc node -e \"\nconst { createClient } = require(''@supabase/supabase-js'');\n\nasync function checkDatabaseSchema() {\n  const supabase = createClient(\n    ''https://kolgqfjgncdwddziqloz.supabase.co'',\n    ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtvbGdxZmpnbmNkd2RkemlxbG96Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NjczODc2MSwiZXhwIjoyMDcyMzE0NzYxfQ.xPoR2Q_yey7AQcorPG3iBLKTadzzSEMmK3eM9ZW46Qc''\n  );\n  \n  try {\n    // Check existing tables\n    const { data: tables } = await supabase.rpc(''get_schema_tables'');\n    console.log(''Existing tables:'', tables);\n  } catch (error) {\n    console.log(''Cannot list tables via RPC, checking manually...'');\n  }\n  \n  // Test specific tables\n  const testTables = [''customers'', ''stripe_events'', ''ai_analysis_results'', ''autobolt_processing_queue''];\n  \n  for (const table of testTables) {\n    try {\n      const { data, error } = await supabase.from(table).select(''*'').limit(1);\n      if (error) {\n        console.log(''❌ Table'', table, ''ERROR:'', error.message);\n      } else {\n        console.log(''✅ Table'', table, ''exists and accessible'');\n      }\n    } catch (e) {\n      console.log(''❌ Table'', table, ''CRITICAL ERROR:'', e.message);\n    }\n  }\n}\n\ncheckDatabaseSchema();\n\")"
    ],
    "deny": [],
    "ask": []
  }
}