// ðŸš€ DIRECTORYBOLT AI-POWERED WEBSITE ANALYSIS API
// Complete AI business intelligence with tiered analysis system

import { NextApiRequest, NextApiResponse } from 'next'
import { logger } from '../../lib/utils/logger'
import { createEnhancedWebsiteAnalyzer, DEFAULT_ENHANCED_CONFIG } from '../../lib/services/enhanced-website-analyzer'
import { createAIBusinessAnalyzer, DEFAULT_AI_ANALYSIS_CONFIG } from '../../lib/services/ai-business-analyzer'
import { DirectoryMatcher } from '../../lib/services/directory-matcher'
import { BusinessIntelligenceResponse } from '../../lib/types/business-intelligence'
import { configureCors, validateInput, sanitizeError, logRequest } from '../../lib/middleware/security'
import { withRateLimit, rateLimitConfigs } from '../../lib/middleware/rate-limiter'

// Analysis tier configuration
interface AnalysisTier {
  name: string
  maxDirectories: number
  includeAIAnalysis: boolean
  includeCompetitorAnalysis: boolean
  includeRevenueProjections: boolean
  includeScreenshots: boolean
  analysisDepth: 'basic' | 'standard' | 'comprehensive'
}

const ANALYSIS_TIERS: Record<string, AnalysisTier> = {\n  free: {\n    name: 'Free Preview',\n    maxDirectories: 5,\n    includeAIAnalysis: false,\n    includeCompetitorAnalysis: false,\n    includeRevenueProjections: false,\n    includeScreenshots: false,\n    analysisDepth: 'basic'\n  },\n  starter: {\n    name: 'Starter Plan',\n    maxDirectories: 25,\n    includeAIAnalysis: true,\n    includeCompetitorAnalysis: false,\n    includeRevenueProjections: false,\n    includeScreenshots: true,\n    analysisDepth: 'standard'\n  },\n  growth: {\n    name: 'Growth Plan',\n    maxDirectories: 75,\n    includeAIAnalysis: true,\n    includeCompetitorAnalysis: true,\n    includeRevenueProjections: true,\n    includeScreenshots: true,\n    analysisDepth: 'comprehensive'\n  },\n  professional: {\n    name: 'Professional Plan',\n    maxDirectories: 150,\n    includeAIAnalysis: true,\n    includeCompetitorAnalysis: true,\n    includeRevenueProjections: true,\n    includeScreenshots: true,\n    analysisDepth: 'comprehensive'\n  },\n  enterprise: {\n    name: 'Enterprise Plan',\n    maxDirectories: 500,\n    includeAIAnalysis: true,\n    includeCompetitorAnalysis: true,\n    includeRevenueProjections: true,\n    includeScreenshots: true,\n    analysisDepth: 'comprehensive'\n  }\n}\n\n// URL validation function\nfunction validateUrl(inputUrl: string): { valid: boolean; url?: URL; error?: string } {\n  if (!inputUrl || typeof inputUrl !== 'string') {\n    return { valid: false, error: 'URL must be a non-empty string' }\n  }\n  \n  if (inputUrl.length > 2048) {\n    return { valid: false, error: 'URL too long (max 2048 characters)' }\n  }\n  \n  try {\n    const url = new URL(inputUrl.startsWith('http') ? inputUrl : `https://${inputUrl}`)\n    \n    if (!['http:', 'https:'].includes(url.protocol)) {\n      return { valid: false, error: 'Only HTTP and HTTPS URLs are allowed' }\n    }\n    \n    // Block internal/private networks\n    const blockedHosts = [\n      'localhost', '127.0.0.1', '0.0.0.0', '::1', 'local', 'internal',\n      '10.', '172.16.', '172.17.', '172.18.', '172.19.', '172.20.',\n      '172.21.', '172.22.', '172.23.', '172.24.', '172.25.', '172.26.',\n      '172.27.', '172.28.', '172.29.', '172.30.', '172.31.', '192.168.'\n    ]\n    \n    const hostname = url.hostname.toLowerCase()\n    if (blockedHosts.some(blocked => hostname.includes(blocked))) {\n      return { valid: false, error: 'Private/internal URLs are not allowed' }\n    }\n    \n    return { valid: true, url }\n  } catch (error) {\n    return { valid: false, error: 'Invalid URL format' }\n  }\n}\n\n// Generate free tier preview data\nfunction generateFreePreview(url: string): any {\n  const domain = new URL(url).hostname\n  const seoScore = Math.floor(Math.random() * 30) + 50 // 50-80\n  const currentListings = Math.floor(Math.random() * 8) + 2 // 2-10\n  const missedOpportunities = Math.floor(Math.random() * 20) + 10 // 10-30\n  const potentialLeads = Math.floor(Math.random() * 300) + 200 // 200-500\n  const visibility = Math.floor((currentListings / (currentListings + missedOpportunities)) * 100)\n\n  return {\n    tier: 'free',\n    title: `Website Analysis Preview for ${domain}`,\n    description: `Basic analysis showing ${currentListings} current listings and ${missedOpportunities}+ missed opportunities`,\n    seoScore,\n    currentListings,\n    missedOpportunities,\n    potentialLeads,\n    visibility,\n    limitedPreview: true,\n    upgradeRequired: true,\n    previewDirectories: [\n      {\n        name: 'Google My Business',\n        authority: 98,\n        estimatedTraffic: 5000,\n        submissionDifficulty: 'Easy',\n        cost: 'Free',\n        successProbability: 95\n      },\n      {\n        name: 'Yelp',\n        authority: 93,\n        estimatedTraffic: 3000,\n        submissionDifficulty: 'Easy',\n        cost: 'Free',\n        successProbability: 88\n      },\n      {\n        name: 'Facebook Business',\n        authority: 95,\n        estimatedTraffic: 4000,\n        submissionDifficulty: 'Easy',\n        cost: 'Free',\n        successProbability: 92\n      },\n      {\n        name: 'Bing Places',\n        authority: 90,\n        estimatedTraffic: 2000,\n        submissionDifficulty: 'Easy',\n        cost: 'Free',\n        successProbability: 85\n      },\n      {\n        name: 'Yellow Pages',\n        authority: 85,\n        estimatedTraffic: 1500,\n        submissionDifficulty: 'Easy',\n        cost: 'Free',\n        successProbability: 80\n      }\n    ],\n    upgradeMessage: {\n      title: 'Unlock Full AI Analysis',\n      description: 'Get complete business intelligence with 75+ directories, competitor analysis, and revenue projections',\n      benefits: [\n        'AI-powered business categorization',\n        'Competitive landscape analysis',\n        'Revenue projection modeling',\n        '75+ high-authority directories',\n        'Success probability scoring',\n        'Platform-specific optimization'\n      ],\n      cta: 'Upgrade to Growth Plan - $299/month'\n    }\n  }\n}\n\nasync function handler(req: NextApiRequest, res: NextApiResponse<BusinessIntelligenceResponse | any>) {\n  const startTime = Date.now()\n  \n  try {\n    // Apply security middleware\n    logRequest(req, res)\n    configureCors(req, res)\n    validateInput(req, res)\n\n    if (req.method === 'OPTIONS') {\n      return res.status(200).end()\n    }\n\n    if (req.method !== 'POST') {\n      return res.status(405).json({\n        success: false,\n        error: 'Method not allowed'\n      })\n    }\n\n    const { url, tier = 'free', userInput } = req.body\n\n    // Validate URL input\n    const urlValidation = validateUrl(url)\n    if (!urlValidation.valid) {\n      return res.status(400).json({\n        success: false,\n        error: urlValidation.error,\n        code: 'INVALID_URL'\n      })\n    }\n\n    const validatedUrl = urlValidation.url!.toString()\n    const analysisTier = ANALYSIS_TIERS[tier] || ANALYSIS_TIERS.free\n\n    logger.info('Starting website analysis', {\n      metadata: {\n        url: validatedUrl,\n        tier: analysisTier.name,\n        depth: analysisTier.analysisDepth\n      }\n    })\n\n    // For free tier, return preview data immediately\n    if (tier === 'free') {\n      const previewData = generateFreePreview(validatedUrl)\n      \n      logger.info('Free tier analysis completed', {\n        metadata: {\n          url: validatedUrl,\n          processingTime: Date.now() - startTime\n        }\n      })\n\n      return res.status(200).json({\n        success: true,\n        data: previewData,\n        processingTime: Date.now() - startTime,\n        usage: {\n          tokensUsed: 0,\n          cost: 0\n        }\n      })\n    }\n\n    // For paid tiers, perform full AI analysis\n    if (!process.env.OPENAI_API_KEY) {\n      logger.error('OpenAI API key not configured')\n      return res.status(500).json({\n        success: false,\n        error: 'AI analysis service not available. Please contact support.',\n        code: 'SERVICE_UNAVAILABLE'\n      })\n    }\n\n    // Step 1: Enhanced Website Analysis\n    const websiteAnalyzer = createEnhancedWebsiteAnalyzer({\n      ...DEFAULT_ENHANCED_CONFIG,\n      enableScreenshots: analysisTier.includeScreenshots,\n      analysisDepth: analysisTier.analysisDepth\n    })\n\n    const websiteData = await websiteAnalyzer.analyzeWebsite(validatedUrl)\n    \n    // Step 2: AI Business Intelligence Analysis\n    const aiAnalyzer = createAIBusinessAnalyzer({\n      ...DEFAULT_AI_ANALYSIS_CONFIG,\n      enableCompetitorAnalysis: analysisTier.includeCompetitorAnalysis,\n      enableRevenueProjections: analysisTier.includeRevenueProjections,\n      analysisDepth: analysisTier.analysisDepth\n    })\n\n    const analysisContext = {\n      websiteData,\n      url: validatedUrl,\n      userInput\n    }\n\n    const businessIntelligence = await aiAnalyzer.analyzeBusinessIntelligence(analysisContext)\n    \n    // Step 3: Directory Matching and Optimization\n    const directoryMatcher = new DirectoryMatcher({\n      maxDirectories: analysisTier.maxDirectories,\n      enableAIOptimization: analysisTier.includeAIAnalysis,\n      includeInternational: true,\n      includePremium: tier !== 'starter',\n      budgetRange: { min: 0, max: tier === 'enterprise' ? 10000 : 1000 },\n      industryFocus: [businessIntelligence.profile.industryVertical],\n      targetROI: 200,\n      analysisDepth: analysisTier.analysisDepth\n    })\n\n    const directoryOpportunities = await directoryMatcher.findOptimalDirectories(businessIntelligence)\n    \n    // Update business intelligence with directory opportunities\n    businessIntelligence.directoryOpportunities = directoryOpportunities\n\n    const processingTime = Date.now() - startTime\n    \n    logger.info('AI analysis completed successfully', {\n      metadata: {\n        url: validatedUrl,\n        tier: analysisTier.name,\n        processingTime,\n        confidence: businessIntelligence.confidence,\n        directoriesFound: directoryOpportunities.totalDirectories\n      }\n    })\n\n    // Calculate usage metrics\n    const estimatedTokens = Math.round(processingTime / 100) // Rough estimate\n    const estimatedCost = estimatedTokens * 0.00002 // Rough GPT-4 pricing\n\n    return res.status(200).json({\n      success: true,\n      data: businessIntelligence,\n      processingTime,\n      usage: {\n        tokensUsed: estimatedTokens,\n        cost: estimatedCost\n      }\n    })\n\n  } catch (error) {\n    const processingTime = Date.now() - startTime\n    \n    logger.error('Website analysis failed', {\n      metadata: {\n        url: req.body?.url || 'unknown',\n        tier: req.body?.tier || 'unknown',\n        processingTime,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }, error instanceof Error ? error : new Error(String(error)))\n    \n    const sanitizedErr = sanitizeError(error instanceof Error ? error : new Error(String(error)))\n    \n    return res.status(sanitizedErr.statusCode || 500).json({\n      success: false,\n      error: sanitizedErr.message,\n      code: sanitizedErr.code || 'ANALYSIS_ERROR',\n      processingTime\n    })\n  }\n}\n\n// Export handler wrapped with rate limiting\nexport default withRateLimit(rateLimitConfigs.analyze, '/api/analyze')(handler)"