name: Deployment Health Monitoring

on:
  # Run after successful deployments
  workflow_run:
    workflows: ["Build and Deploy"]
    types: [completed]
    branches: [main]
  
  # Run on schedule every 15 minutes
  schedule:
    - cron: '*/15 * * * *'
  
  # Allow manual trigger
  workflow_dispatch:

jobs:
  health-check:
    name: Monitor DirectoryBolt.com Health
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --only=production
      
      - name: Run deployment health check
        id: health-check
        run: |
          node scripts/monitor-deployment.js
          echo "health_status=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
      
      - name: Upload health report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report-${{ github.run_number }}
          path: deployment-report-*.json
          retention-days: 7
      
      - name: Create GitHub issue on failure
        if: steps.health-check.outputs.health_status != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Find the latest report file
            const reportFiles = fs.readdirSync('.').filter(f => f.startsWith('deployment-report-'));
            if (reportFiles.length === 0) return;
            
            const reportFile = reportFiles[reportFiles.length - 1];
            const report = JSON.parse(fs.readFileSync(reportFile, 'utf8'));
            
            const issueTitle = `🚨 Deployment Health Issue - ${report.overall.healthPercentage}% healthy`;
            const issueBody = `
            ## Deployment Health Alert
            
            **Timestamp:** ${report.timestamp}
            **Health Score:** ${report.overall.healthPercentage}% (${report.overall.healthyEndpoints}/${report.overall.totalEndpoints} endpoints)
            **Average Response Time:** ${report.overall.avgResponseTime}ms
            
            ### Issues Detected
            ${report.errors.map(e => `- **${e.path}**: ${e.error || `Status ${e.status}`}${e.hasRawJavaScript ? ' ⚠️ Raw JS detected' : ''}`).join('\\n')}
            
            ### Recommendations
            ${report.recommendations.map(r => `- ${r}`).join('\\n')}
            
            ### Next Steps
            1. Check [Netlify deployment logs](https://app.netlify.com)
            2. Verify environment variables are properly set
            3. Test API endpoints manually
            4. Check for recent code changes that might have caused issues
            
            **Workflow:** [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            // Check if there's already an open issue
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'deployment-health'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['deployment-health', 'bug', 'priority-high']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues.data[0].number,
                body: `**Update:** ${new Date().toISOString()}\n${issueBody}`
              });
            }
      
      - name: Close resolved issues
        if: steps.health-check.outputs.health_status == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'deployment-health'
            });
            
            for (const issue of existingIssues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Deployment health restored** at ${new Date().toISOString()}\\n\\nAll endpoints are now responding correctly. This issue has been automatically resolved.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            }

  notify-status:
    name: Notify Deployment Status
    needs: health-check
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.health-check.result == 'success'
        run: |
          echo "✅ DirectoryBolt.com is healthy and operational"
      
      - name: Notify failure
        if: needs.health-check.result == 'failure'
        run: |
          echo "🚨 DirectoryBolt.com health issues detected"
          echo "Check the health-check job logs and artifacts for details"