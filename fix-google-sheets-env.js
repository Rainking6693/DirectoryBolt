/**\n * JASON - Fix Google Sheets Environment Variables\n * Fixes the malformed GOOGLE_PRIVATE_KEY in .env.local\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('🔧 JASON - Fixing Google Sheets Environment Variables...');\n\n// Read the current .env.local file\nconst envPath = '.env.local';\nlet envContent = fs.readFileSync(envPath, 'utf8');\n\nconsole.log('📄 Current .env.local file read successfully');\n\n// Extract the private key section\nconst privateKeyStart = envContent.indexOf('GOOGLE_PRIVATE_KEY=');\nconst privateKeyEnd = envContent.indexOf('-----END PRIVATE KEY-----') + '-----END PRIVATE KEY-----'.length;\n\nif (privateKeyStart === -1 || privateKeyEnd === -1) {\n  console.error('❌ Could not find GOOGLE_PRIVATE_KEY section in .env.local');\n  process.exit(1);\n}\n\n// Extract the malformed private key\nconst malformedKeySection = envContent.substring(privateKeyStart, privateKeyEnd);\nconsole.log('🔍 Found malformed private key section');\n\n// Extract just the key content (without the GOOGLE_PRIVATE_KEY= part)\nconst keyContent = malformedKeySection.replace('GOOGLE_PRIVATE_KEY=\\n', '').trim();\n\n// Convert to single line with \\n escapes\nconst fixedPrivateKey = keyContent.replace(/\\n/g, '\\\\n');\n\nconsole.log('✅ Private key converted to single line format');\n\n// Create the fixed environment variable line\nconst fixedKeyLine = `GOOGLE_PRIVATE_KEY=\"${fixedPrivateKey}\"`;\n\n// Replace the malformed section with the fixed version\nconst fixedEnvContent = envContent.substring(0, privateKeyStart) + \n                       fixedKeyLine + \n                       envContent.substring(privateKeyEnd);\n\n// Write the fixed content back to .env.local\nfs.writeFileSync(envPath, fixedEnvContent);\n\nconsole.log('✅ Fixed .env.local file written successfully');\n\n// Verify the fix by testing Google Sheets connection\nconsole.log('\\n🧪 Testing Google Sheets connection with fixed credentials...');\n\n// Clear require cache to reload environment variables\ndelete require.cache[require.resolve('dotenv')];\nrequire('dotenv').config({ path: '.env.local' });\n\ntry {\n  const { createGoogleSheetsService } = require('./lib/services/google-sheets.js');\n  \n  console.log('📊 Creating Google Sheets service...');\n  const service = createGoogleSheetsService();\n  \n  service.initialize().then(() => {\n    console.log('✅ Google Sheets service initialized successfully!');\n    \n    // Test with a known customer ID\n    const testCustomerId = 'DIR-2025-001234';\n    console.log(`🔍 Testing customer lookup: ${testCustomerId}`);\n    \n    return service.findByCustomerId(testCustomerId);\n  }).then((customer) => {\n    if (customer) {\n      console.log('✅ SUCCESS! Customer found in Google Sheets:');\n      console.log(`   Customer ID: ${customer.customerId || customer.customerID}`);\n      console.log(`   Business Name: ${customer.businessName}`);\n      console.log(`   Package Type: ${customer.packageType}`);\n      \n      console.log('\\n🎯 GOOGLE SHEETS CONNECTION FIXED!');\n      console.log('   The extension validation should now work.');\n      \n    } else {\n      console.log('⚠️  Customer not found, but connection is working');\n      console.log('   Need to add test customers to Google Sheets');\n      \n      // Create a test customer\n      console.log('\\n🧪 Creating test customer...');\n      return service.createBusinessSubmission({\n        customerId: 'DIR-2025-001234',\n        businessName: 'Test Business for Extension',\n        email: 'test@directorybolt.com',\n        packageType: 'professional',\n        submissionStatus: 'pending'\n      });\n    }\n  }).then((result) => {\n    if (result && result.customerId) {\n      console.log('✅ Test customer created successfully!');\n      console.log(`   Customer ID: ${result.customerId}`);\n      console.log(`   Business Name: ${result.businessName}`);\n    }\n    \n    console.log('\\n🚀 READY FOR EXTENSION TESTING!');\n    console.log('   1. Google Sheets connection is working');\n    console.log('   2. Test customer exists in database');\n    console.log('   3. Extension validation should now succeed');\n    \n  }).catch((error) => {\n    console.error('❌ Google Sheets test failed:', error.message);\n    \n    if (error.message.includes('private key')) {\n      console.log('\\n🔧 Private key still has issues. Trying alternative format...');\n      \n      // Try base64 encoding the private key\n      const base64Key = Buffer.from(keyContent).toString('base64');\n      const base64KeyLine = `GOOGLE_PRIVATE_KEY=\"${base64Key}\"`;\n      \n      const base64EnvContent = envContent.substring(0, privateKeyStart) + \n                              base64KeyLine + \n                              envContent.substring(privateKeyEnd);\n      \n      fs.writeFileSync(envPath + '.base64', base64EnvContent);\n      console.log('💾 Created .env.local.base64 with base64-encoded private key');\n      console.log('   Try using this version if the escaped version doesn\\'t work');\n    }\n  });\n  \n} catch (error) {\n  console.error('💥 Failed to test Google Sheets:', error.message);\n}\n\nconsole.log('\\n📋 SUMMARY:');\nconsole.log('✅ Fixed malformed GOOGLE_PRIVATE_KEY in .env.local');\nconsole.log('✅ Converted multi-line private key to single-line escaped format');\nconsole.log('🧪 Testing Google Sheets connection...');\n"