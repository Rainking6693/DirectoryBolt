#!/usr/bin/env node

/**
 * JSON Files Repair Script
 * Fixes empty, malformed, and problematic JSON files causing build failures
 */

const fs = require('fs')
const path = require('path')

function createMinimalGuideTemplate(slug) {
  return {
    slug: slug,
    title: `${slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Guide`,
    description: `Complete guide for ${slug.replace(/-/g, ' ')} setup and optimization.`,
    directoryName: slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
    category: \"Business Directory\",\n    difficulty: \"beginner\",\n    estimatedReadTime: \"5 min read\",\n    featuredImage: `https://directorybolt.com/images/guides/${slug}-hero.jpg`,\n    publishedAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    version: \"1.0.0\",\n    viewCount: 0,\n    seo: {\n      title: `${slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Guide 2024`,\n      description: `Learn how to set up and optimize your ${slug.replace(/-/g, ' ')} presence.`,\n      keywords: [\n        slug.replace(/-/g, ' '),\n        `${slug.replace(/-/g, ' ')} guide`,\n        `${slug.replace(/-/g, ' ')} setup`,\n        \"business directory\",\n        \"local business\"\n      ]\n    },\n    content: {\n      requirements: [\n        \"Business information and contact details\",\n        \"High-quality business photos\",\n        \"Accurate business description\"\n      ],\n      tools: [\n        \"Web browser\",\n        \"Business documentation\",\n        \"Photo editing software\"\n      ],\n      sections: [\n        {\n          id: \"getting-started\",\n          title: \"Getting Started\",\n          content: `<p>This guide will help you set up and optimize your ${slug.replace(/-/g, ' ')} presence for maximum visibility and customer engagement.</p>`,\n          tips: [\n            \"Ensure all information is accurate and up-to-date\",\n            \"Use high-quality photos to showcase your business\",\n            \"Complete all available profile sections\"\n          ],\n          image: `https://directorybolt.com/images/guides/${slug}-setup.jpg`\n        }\n      ]\n    },\n    internalLinks: {\n      relatedGuides: [],\n      relatedDirectories: []\n    }\n  }\n}\n\nfunction repairJsonFile(filePath) {\n  const filename = path.basename(filePath)\n  const slug = path.basename(filePath, '.json')\n  const results = {\n    filename,\n    repaired: false,\n    issues: [],\n    actions: []\n  }\n\n  try {\n    // Check if file exists\n    if (!fs.existsSync(filePath)) {\n      results.issues.push('File does not exist')\n      return results\n    }\n\n    // Check file size\n    const stats = fs.statSync(filePath)\n    if (stats.size === 0) {\n      results.issues.push('File is empty')\n      \n      // Create minimal template for empty files\n      const template = createMinimalGuideTemplate(slug)\n      fs.writeFileSync(filePath, JSON.stringify(template, null, 2))\n      results.repaired = true\n      results.actions.push('Created minimal guide template')\n      return results\n    }\n\n    // Read file content\n    let content = fs.readFileSync(filePath, 'utf8')\n    \n    // Check for empty or whitespace-only content\n    if (!content.trim()) {\n      results.issues.push('File contains only whitespace')\n      \n      const template = createMinimalGuideTemplate(slug)\n      fs.writeFileSync(filePath, JSON.stringify(template, null, 2))\n      results.repaired = true\n      results.actions.push('Replaced whitespace with minimal template')\n      return results\n    }\n\n    // Fix common JSON issues\n    let originalContent = content\n    \n    // Fix unterminated strings (common issue from error logs)\n    if (content.includes('\"') && !content.match(/\"[^\"]*\"$/)) {\n      // Look for unterminated strings at the end\n      content = content.replace(/\"[^\"]*$/, '\"')\n      results.issues.push('Fixed unterminated string')\n    }\n    \n    // Fix missing closing braces\n    const openBraces = (content.match(/{/g) || []).length\n    const closeBraces = (content.match(/}/g) || []).length\n    if (openBraces > closeBraces) {\n      const missingBraces = openBraces - closeBraces\n      content += '}'.repeat(missingBraces)\n      results.issues.push(`Added ${missingBraces} missing closing brace(s)`)\n    }\n    \n    // Fix trailing commas\n    content = content.replace(/,\\s*([}\\]])/g, '$1')\n    \n    // Attempt to parse JSON\n    let parsed\n    try {\n      parsed = JSON.parse(content)\n    } catch (parseError) {\n      results.issues.push(`JSON parsing failed: ${parseError.message}`)\n      \n      // If parsing still fails, create new template\n      const template = createMinimalGuideTemplate(slug)\n      fs.writeFileSync(filePath, JSON.stringify(template, null, 2))\n      results.repaired = true\n      results.actions.push('Replaced malformed JSON with minimal template')\n      return results\n    }\n\n    // Validate and fix required fields\n    let needsUpdate = false\n    \n    if (!parsed.slug) {\n      parsed.slug = slug\n      needsUpdate = true\n      results.issues.push('Added missing slug field')\n    }\n    \n    if (!parsed.title) {\n      parsed.title = `${slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())} Guide`\n      needsUpdate = true\n      results.issues.push('Added missing title field')\n    }\n    \n    if (!parsed.directoryName) {\n      parsed.directoryName = slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())\n      needsUpdate = true\n      results.issues.push('Added missing directoryName field')\n    }\n    \n    if (!parsed.description) {\n      parsed.description = `Complete guide for ${slug.replace(/-/g, ' ')} setup and optimization.`\n      needsUpdate = true\n      results.issues.push('Added missing description field')\n    }\n    \n    if (!parsed.category) {\n      parsed.category = \"Business Directory\"\n      needsUpdate = true\n      results.issues.push('Added missing category field')\n    }\n    \n    if (!parsed.difficulty) {\n      parsed.difficulty = \"beginner\"\n      needsUpdate = true\n      results.issues.push('Added missing difficulty field')\n    }\n    \n    if (!parsed.estimatedReadTime) {\n      parsed.estimatedReadTime = \"5 min read\"\n      needsUpdate = true\n      results.issues.push('Added missing estimatedReadTime field')\n    }\n    \n    if (!parsed.publishedAt) {\n      parsed.publishedAt = new Date().toISOString()\n      needsUpdate = true\n      results.issues.push('Added missing publishedAt field')\n    }\n    \n    if (!parsed.updatedAt) {\n      parsed.updatedAt = new Date().toISOString()\n      needsUpdate = true\n      results.issues.push('Added missing updatedAt field')\n    }\n    \n    if (!parsed.version) {\n      parsed.version = \"1.0.0\"\n      needsUpdate = true\n      results.issues.push('Added missing version field')\n    }\n    \n    if (parsed.viewCount === undefined) {\n      parsed.viewCount = 0\n      needsUpdate = true\n      results.issues.push('Added missing viewCount field')\n    }\n    \n    // Ensure nested objects exist\n    if (!parsed.seo) {\n      parsed.seo = {\n        title: parsed.title,\n        description: parsed.description,\n        keywords: [slug.replace(/-/g, ' ')]\n      }\n      needsUpdate = true\n      results.issues.push('Added missing seo object')\n    }\n    \n    if (!parsed.content) {\n      parsed.content = {\n        requirements: [],\n        tools: [],\n        sections: []\n      }\n      needsUpdate = true\n      results.issues.push('Added missing content object')\n    }\n    \n    if (!parsed.internalLinks) {\n      parsed.internalLinks = {\n        relatedGuides: [],\n        relatedDirectories: []\n      }\n      needsUpdate = true\n      results.issues.push('Added missing internalLinks object')\n    }\n    \n    // Write updated content if needed\n    if (needsUpdate || content !== originalContent) {\n      fs.writeFileSync(filePath, JSON.stringify(parsed, null, 2))\n      results.repaired = true\n      results.actions.push('Updated and reformatted JSON file')\n    }\n\n  } catch (error) {\n    results.issues.push(`Unexpected error: ${error.message}`)\n    \n    // Create new template as fallback\n    try {\n      const template = createMinimalGuideTemplate(slug)\n      fs.writeFileSync(filePath, JSON.stringify(template, null, 2))\n      results.repaired = true\n      results.actions.push('Created new template due to critical error')\n    } catch (writeError) {\n      results.issues.push(`Failed to create template: ${writeError.message}`)\n    }\n  }\n\n  return results\n}\n\nfunction repairAllJsonFiles() {\n  const guidesDir = path.join(process.cwd(), 'data', 'guides')\n  \n  console.log('🔧 Repairing JSON guide files...')\n  console.log(`📁 Directory: ${guidesDir}`)\n  \n  if (!fs.existsSync(guidesDir)) {\n    console.error('❌ Guides directory does not exist!')\n    process.exit(1)\n  }\n\n  const files = fs.readdirSync(guidesDir).filter(file => \n    file.endsWith('.json') && !file.startsWith('_')\n  )\n  console.log(`📄 Found ${files.length} JSON files to check`)\n  \n  const results = {\n    total: files.length,\n    repaired: 0,\n    noIssues: 0,\n    failed: 0,\n    details: []\n  }\n\n  for (const file of files) {\n    const filePath = path.join(guidesDir, file)\n    const repair = repairJsonFile(filePath)\n    results.details.push(repair)\n\n    if (repair.repaired) {\n      results.repaired++\n      console.log(`🔧 ${file} - REPAIRED`)\n      repair.issues.forEach(issue => {\n        console.log(`   🔸 Issue: ${issue}`)\n      })\n      repair.actions.forEach(action => {\n        console.log(`   ✅ Action: ${action}`)\n      })\n    } else if (repair.issues.length > 0) {\n      results.failed++\n      console.log(`❌ ${file} - FAILED TO REPAIR`)\n      repair.issues.forEach(issue => {\n        console.log(`   🔴 Issue: ${issue}`)\n      })\n    } else {\n      results.noIssues++\n      console.log(`✅ ${file} - No issues found`)\n    }\n  }\n\n  console.log('\\n📊 Repair Summary:')\n  console.log(`   Total files: ${results.total}`)\n  console.log(`   Files repaired: ${results.repaired}`)\n  console.log(`   Files with no issues: ${results.noIssues}`)\n  console.log(`   Files that failed repair: ${results.failed}`)\n\n  if (results.failed > 0) {\n    console.log('\\n⚠️  Some files could not be repaired automatically')\n    console.log('   Manual intervention may be required')\n  } else {\n    console.log('\\n✅ All JSON files are now valid!')\n  }\n\n  return results.failed === 0\n}\n\n// Run repair if called directly\nif (require.main === module) {\n  const success = repairAllJsonFiles()\n  process.exit(success ? 0 : 1)\n}\n\nmodule.exports = { repairJsonFile, repairAllJsonFiles, createMinimalGuideTemplate }"