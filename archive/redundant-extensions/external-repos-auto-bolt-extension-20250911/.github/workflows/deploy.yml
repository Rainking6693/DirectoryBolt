name: Auto-Bolt Production Deployment

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: Run linting
        run: |
          cd backend
          npm run lint
          
      - name: Run unit tests
        run: |
          cd backend
          npm test -- --coverage
          
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          
  extension-validation:
    name: Validate Chrome Extension
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate manifest.json
        run: |
          # Validate manifest.json schema
          python -c "
          import json
          import sys
          
          try:
              with open('manifest.json', 'r') as f:
                  manifest = json.load(f)
              
              # Basic validation
              required_fields = ['manifest_version', 'name', 'version', 'description']
              for field in required_fields:
                  if field not in manifest:
                      print(f'Missing required field: {field}')
                      sys.exit(1)
              
              # Version 3 validation
              if manifest.get('manifest_version') != 3:
                  print('Manifest version must be 3')
                  sys.exit(1)
                  
              print('Manifest validation passed')
          except Exception as e:
              print(f'Manifest validation failed: {e}')
              sys.exit(1)
          "
          
      - name: Check required files
        run: |
          required_files=(
            "manifest.json"
            "popup.html"
            "popup.js"
            "content.js"
            "background-batch.js"
            "icons/icon16.png"
            "icons/icon48.png"
            "icons/icon128.png"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Missing required file: $file"
              exit 1
            fi
          done
          echo "All required files present"
          
      - name: Validate directory data
        run: |
          if [ ! -f "directories/master-directory-list.json" ]; then
            echo "Missing directory data file"
            exit 1
          fi
          
          # Validate JSON structure
          python -c "
          import json
          
          try:
              with open('directories/master-directory-list.json', 'r') as f:
                  data = json.load(f)
              
              if 'directories' not in data:
                  raise Exception('Missing directories array')
                  
              if len(data['directories']) < 50:
                  raise Exception('Insufficient directory count')
                  
              print(f'Directory validation passed: {len(data[\"directories\"])} directories')
          except Exception as e:
              print(f'Directory validation failed: {e}')
              exit 1
          "

  build-extension:
    name: Build Extension Package
    needs: [test, extension-validation]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Create extension package
        run: |
          # Create clean build directory
          mkdir -p build/auto-bolt-extension
          
          # Copy core extension files
          cp manifest.json build/auto-bolt-extension/
          cp -r icons build/auto-bolt-extension/
          cp -r directories build/auto-bolt-extension/
          
          # Copy JavaScript files
          cp popup.html popup.js popup.css build/auto-bolt-extension/
          cp content.js background-batch.js build/auto-bolt-extension/
          cp directory-form-filler.js directory-registry.js build/auto-bolt-extension/
          cp queue-processor.js build/auto-bolt-extension/
          
          # Copy enhanced popup if exists
          if [ -f "enhanced-popup.html" ]; then
            cp enhanced-popup.html enhanced-popup.js enhanced-popup.css build/auto-bolt-extension/
          fi
          
          # Generate build info
          echo "{
            \"buildDate\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"gitCommit\": \"$GITHUB_SHA\",
            \"version\": \"$(jq -r '.version' manifest.json)\",
            \"environment\": \"production\"
          }" > build/auto-bolt-extension/build-info.json
          
      - name: Create ZIP package
        run: |
          cd build
          zip -r auto-bolt-v$(jq -r '.version' ../manifest.json).zip auto-bolt-extension/
          
      - name: Upload extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: auto-bolt-extension
          path: build/auto-bolt-v*.zip
          retention-days: 30

  deploy-backend:
    name: Deploy Backend to Netlify
    needs: [test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd backend
          npm ci
          
      - name: Build backend
        run: |
          cd backend
          npm run build
          
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './backend/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: |
          cd backend
          npm audit --audit-level high
          
      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  e2e-tests:
    name: End-to-End Tests
    needs: [build-extension, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Download extension artifact
        uses: actions/download-artifact@v3
        with:
          name: auto-bolt-extension
          path: ./artifacts
          
      - name: Run E2E tests
        run: |
          # Install test dependencies
          npm install -g puppeteer
          
          # Extract extension
          cd artifacts
          unzip auto-bolt-v*.zip
          
          # Run automated tests (placeholder)
          echo "Running E2E tests..."
          # Add actual E2E test script here
          
  release:
    name: Create Release
    needs: [build-extension, deploy-backend, e2e-tests]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download extension artifact
        uses: actions/download-artifact@v3
        with:
          name: auto-bolt-extension
          path: ./artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/auto-bolt-v*.zip
          generate_release_notes: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload to Chrome Web Store
        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
        run: |
          # Install chrome-webstore-upload
          npm install -g chrome-webstore-upload
          
          # Upload to Chrome Web Store
          cd artifacts
          chrome-webstore-upload upload --source auto-bolt-v*.zip --extension-id $CHROME_EXTENSION_ID
          
          # Publish the extension
          chrome-webstore-upload publish --extension-id $CHROME_EXTENSION_ID

  notify:
    name: Notify Team
    needs: [release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "✅ Auto-Bolt successfully deployed to production!"
            # Add Slack/email notification here
          else
            echo "❌ Auto-Bolt deployment failed"
            # Add failure notification here
          fi