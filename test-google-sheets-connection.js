/**\n * JASON - Google Sheets Connection Test\n * Tests the Google Sheets service to identify environment variable issues\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('üîç JASON - Testing Google Sheets Connection...');\nconsole.log('=' .repeat(60));\n\n// Check environment variables\nconsole.log('\\nüìä Environment Variables Status:');\nconst requiredVars = {\n  'GOOGLE_SHEET_ID': process.env.GOOGLE_SHEET_ID,\n  'GOOGLE_SERVICE_ACCOUNT_EMAIL': process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,\n  'GOOGLE_PRIVATE_KEY': process.env.GOOGLE_PRIVATE_KEY\n};\n\nfor (const [key, value] of Object.entries(requiredVars)) {\n  if (value) {\n    console.log(`‚úÖ ${key}: SET (${key === 'GOOGLE_PRIVATE_KEY' ? value.length + ' chars' : value.substring(0, 50) + '...'})`);\n  } else {\n    console.log(`‚ùå ${key}: MISSING`);\n  }\n}\n\n// Check if .env.local exists and has the variables\nconsole.log('\\nüìÑ Environment File Check:');\nconst envFiles = ['.env.local', '.env.production', '.env'];\n\nfor (const envFile of envFiles) {\n  if (fs.existsSync(envFile)) {\n    console.log(`‚úÖ ${envFile} exists`);\n    \n    const content = fs.readFileSync(envFile, 'utf8');\n    const hasGoogleVars = content.includes('GOOGLE_SHEET_ID') && \n                         content.includes('GOOGLE_SERVICE_ACCOUNT_EMAIL') && \n                         content.includes('GOOGLE_PRIVATE_KEY');\n    \n    if (hasGoogleVars) {\n      console.log(`   ‚úÖ Contains Google Sheets variables`);\n    } else {\n      console.log(`   ‚ùå Missing Google Sheets variables`);\n    }\n  } else {\n    console.log(`‚ùå ${envFile} not found`);\n  }\n}\n\n// Test Google Sheets service\nconsole.log('\\nüß™ Testing Google Sheets Service...');\n\ntry {\n  const { createGoogleSheetsService } = require('./lib/services/google-sheets.js');\n  \n  console.log('‚úÖ Google Sheets service module loaded');\n  \n  const service = createGoogleSheetsService();\n  console.log('‚úÖ Google Sheets service instance created');\n  \n  // Test initialization\n  service.initialize().then(() => {\n    console.log('‚úÖ Google Sheets service initialized successfully');\n    \n    // Test finding a customer\n    const testCustomerId = 'DIR-2025-001234';\n    console.log(`\\nüîç Testing customer lookup: ${testCustomerId}`);\n    \n    return service.findByCustomerId(testCustomerId);\n  }).then((customer) => {\n    if (customer) {\n      console.log('‚úÖ Customer found in Google Sheets:');\n      console.log(`   Customer ID: ${customer.customerId || customer.customerID}`);\n      console.log(`   Business Name: ${customer.businessName}`);\n      console.log(`   Package Type: ${customer.packageType}`);\n      console.log(`   Status: ${customer.submissionStatus}`);\n      \n      console.log('\\nüéØ DIAGNOSIS: Google Sheets is working locally!');\n      console.log('   The issue is likely in the production Netlify environment.');\n      console.log('   Need to verify environment variables are set in Netlify.');\n      \n    } else {\n      console.log('‚ùå Customer not found in Google Sheets');\n      console.log('\\nüîß DIAGNOSIS: Customer data missing from Google Sheets');\n      console.log('   Need to add test customers to the Google Sheet.');\n    }\n  }).catch((error) => {\n    console.error('‚ùå Google Sheets service failed:', error.message);\n    console.error('   Full error:', error.stack);\n    \n    console.log('\\nüîß DIAGNOSIS: Google Sheets configuration issue');\n    \n    if (error.message.includes('environment variable')) {\n      console.log('   Issue: Missing environment variables');\n      console.log('   Solution: Set GOOGLE_* variables in Netlify environment');\n    } else if (error.message.includes('authentication')) {\n      console.log('   Issue: Authentication failure');\n      console.log('   Solution: Check service account credentials');\n    } else if (error.message.includes('private key')) {\n      console.log('   Issue: Private key format problem');\n      console.log('   Solution: Check private key formatting in environment');\n    } else {\n      console.log('   Issue: Unknown Google Sheets error');\n      console.log('   Solution: Check Google Sheets service configuration');\n    }\n  });\n  \n} catch (error) {\n  console.error('üí• Failed to load Google Sheets service:', error.message);\n  console.error('   Full error:', error.stack);\n  \n  console.log('\\nüîß DIAGNOSIS: Module loading issue');\n  console.log('   Check if lib/services/google-sheets.js exists and is valid');\n}\n\n// Test a simple API call to production\nconsole.log('\\nüåê Testing Production API...');\n\nconst testProductionAPI = async () => {\n  try {\n    const fetch = require('node-fetch');\n    \n    // Test health endpoint first\n    console.log('\\nüè• Testing health endpoint...');\n    const healthResponse = await fetch('https://directorybolt.com/api/health', {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'DirectoryBolt-Test/1.0'\n      }\n    });\n    \n    console.log(`Health Status: ${healthResponse.status}`);\n    const healthText = await healthResponse.text();\n    console.log(`Health Response: ${healthText.substring(0, 300)}`);\n    \n    // Test validation endpoint\n    console.log('\\nüîç Testing validation endpoint...');\n    const validationResponse = await fetch('https://directorybolt.com/api/extension/validate', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'DirectoryBolt-Test/1.0'\n      },\n      body: JSON.stringify({\n        customerId: 'DIR-2025-001234',\n        extensionVersion: '3.0.1',\n        timestamp: Date.now()\n      })\n    });\n    \n    console.log(`Validation Status: ${validationResponse.status}`);\n    const validationText = await validationResponse.text();\n    console.log(`Validation Response: ${validationText.substring(0, 300)}`);\n    \n    if (validationResponse.ok) {\n      try {\n        const data = JSON.parse(validationText);\n        if (data.valid) {\n          console.log('‚úÖ Production validation is working!');\n        } else {\n          console.log('‚ùå Production validation failed:', data.error);\n          if (data.debug) {\n            console.log('üîß Debug info:', data.debug);\n          }\n        }\n      } catch (e) {\n        console.log('‚ö†Ô∏è  Response not JSON');\n      }\n    } else {\n      console.log('‚ùå Production validation endpoint returned error');\n    }\n    \n  } catch (error) {\n    console.error('üí• Production API test failed:', error.message);\n  }\n};\n\n// Run production test after a short delay\nsetTimeout(testProductionAPI, 2000);\n\nconsole.log('\\n‚è≥ Running tests... (results will appear above)');\n"