/**\n * ELITE API - Google Sheets Connection Test\n * \n * Tests the Google Sheets service to ensure it can connect and find customers\n */\n\nconst { createGoogleSheetsService } = require('./lib/services/google-sheets.js');\n\nconsole.log('üîç ELITE API - Testing Google Sheets Connection');\nconsole.log('=' .repeat(50));\n\nasync function testGoogleSheetsConnection() {\n  try {\n    // Step 1: Create service\n    console.log('\\nüìä Step 1: Creating Google Sheets service...');\n    const service = createGoogleSheetsService();\n    console.log('‚úÖ Service created successfully');\n    \n    // Step 2: Test initialization\n    console.log('\\nüîÑ Step 2: Initializing service...');\n    await service.initialize();\n    console.log('‚úÖ Service initialized successfully');\n    \n    // Step 3: Test health check\n    console.log('\\nüè• Step 3: Running health check...');\n    const healthCheck = await service.healthCheck();\n    console.log(`${healthCheck ? '‚úÖ' : '‚ùå'} Health check: ${healthCheck ? 'PASSED' : 'FAILED'}`);\n    \n    if (!healthCheck) {\n      throw new Error('Health check failed - cannot proceed with customer tests');\n    }\n    \n    // Step 4: Test customer lookup\n    console.log('\\nüîç Step 4: Testing customer lookup...');\n    const testCustomerIds = [\n      'DIR-20250914-000001',  // Target customer from requirements\n      'DIR-2025-001234',      // Test customer\n      'TEST-CUSTOMER-123'     // Development customer\n    ];\n    \n    let foundCustomers = 0;\n    \n    for (const customerId of testCustomerIds) {\n      try {\n        console.log(`\\n   Testing: ${customerId}`);\n        const customer = await service.findByCustomerId(customerId);\n        \n        if (customer) {\n          foundCustomers++;\n          console.log('   ‚úÖ FOUND:', {\n            customerId: customer.customerId || customer.customerID,\n            businessName: customer.businessName,\n            packageType: customer.packageType,\n            submissionStatus: customer.submissionStatus\n          });\n        } else {\n          console.log('   ‚ùå NOT FOUND');\n        }\n      } catch (error) {\n        console.log(`   üí• ERROR: ${error.message}`);\n      }\n    }\n    \n    // Step 5: Summary\n    console.log('\\nüìä SUMMARY:');\n    console.log(`Found ${foundCustomers} out of ${testCustomerIds.length} test customers`);\n    \n    if (foundCustomers > 0) {\n      console.log('‚úÖ Google Sheets connection is working!');\n      console.log('‚úÖ Customer data is accessible');\n      console.log('‚úÖ API endpoint should work correctly');\n    } else {\n      console.log('‚ö†Ô∏è  No customers found - this could mean:');\n      console.log('   1. Google Sheets is empty');\n      console.log('   2. Customer IDs don\\'t exist in the sheet');\n      console.log('   3. Column mapping is incorrect');\n      console.log('   4. Search logic needs adjustment');\n    }\n    \n  } catch (error) {\n    console.error('\\nüí• Google Sheets connection test failed:', error.message);\n    console.error('Full error:', error.stack);\n    \n    // Diagnostic information\n    console.log('\\nüîß DIAGNOSTIC INFORMATION:');\n    \n    // Check service account file\n    const fs = require('fs');\n    const path = require('path');\n    const serviceAccountPath = path.join(process.cwd(), 'config', 'google-service-account.json');\n    \n    console.log(`Service account file exists: ${fs.existsSync(serviceAccountPath)}`);\n    console.log(`Service account path: ${serviceAccountPath}`);\n    \n    // Check environment variables\n    console.log('Environment variables:', {\n      GOOGLE_SHEET_ID: !!process.env.GOOGLE_SHEET_ID,\n      GOOGLE_SERVICE_ACCOUNT_EMAIL: !!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,\n      GOOGLE_PRIVATE_KEY: !!process.env.GOOGLE_PRIVATE_KEY,\n      GOOGLE_PRIVATE_KEY_LENGTH: (process.env.GOOGLE_PRIVATE_KEY || '').length\n    });\n    \n    if (fs.existsSync(serviceAccountPath)) {\n      try {\n        const content = fs.readFileSync(serviceAccountPath, 'utf8');\n        const parsed = JSON.parse(content);\n        console.log('Service account file structure:', {\n          type: parsed.type,\n          project_id: parsed.project_id,\n          client_email: parsed.client_email,\n          has_private_key: !!parsed.private_key,\n          private_key_length: parsed.private_key?.length || 0\n        });\n      } catch (e) {\n        console.log('Failed to read service account file:', e.message);\n      }\n    }\n  }\n}\n\n// Add test customers to Google Sheets (if needed)\nasync function addTestCustomers() {\n  try {\n    console.log('\\n‚ûï Adding test customers to Google Sheets...');\n    \n    const service = createGoogleSheetsService();\n    await service.initialize();\n    \n    const testCustomers = [\n      {\n        customerId: 'DIR-20250914-000001',\n        businessName: 'Elite Test Business',\n        firstName: 'Elite',\n        lastName: 'Customer',\n        email: 'elite@test.com',\n        packageType: 'professional',\n        submissionStatus: 'pending'\n      },\n      {\n        customerId: 'DIR-2025-001234',\n        businessName: 'Test Business 1',\n        firstName: 'Test',\n        lastName: 'Customer',\n        email: 'test1@test.com',\n        packageType: 'starter',\n        submissionStatus: 'pending'\n      },\n      {\n        customerId: 'TEST-CUSTOMER-123',\n        businessName: 'Development Test Business',\n        firstName: 'Dev',\n        lastName: 'Customer',\n        email: 'dev@test.com',\n        packageType: 'growth',\n        submissionStatus: 'pending'\n      }\n    ];\n    \n    for (const customer of testCustomers) {\n      try {\n        // Check if customer already exists\n        const existing = await service.findByCustomerId(customer.customerId);\n        if (existing) {\n          console.log(`   ‚úÖ Customer ${customer.customerId} already exists`);\n        } else {\n          // Create new customer\n          const result = await service.createBusinessSubmission(customer);\n          console.log(`   ‚úÖ Created customer ${customer.customerId}`);\n        }\n      } catch (error) {\n        console.log(`   ‚ùå Failed to create ${customer.customerId}: ${error.message}`);\n      }\n    }\n    \n  } catch (error) {\n    console.error('Failed to add test customers:', error.message);\n  }\n}\n\n// Main execution\nasync function main() {\n  await testGoogleSheetsConnection();\n  \n  // Uncomment to add test customers if they don't exist\n  // await addTestCustomers();\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = {\n  testGoogleSheetsConnection,\n  addTestCustomers\n};"